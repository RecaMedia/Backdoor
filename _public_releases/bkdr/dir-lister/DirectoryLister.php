<?php
 class DirectoryLister { const VERSION = '2.6.1'; protected $_directory = null; protected $_appDir = null; protected $_appURL = null; protected $_config = null; protected $_fileTypes = null; protected $_systemMessage = null; protected $_omitPath = null; public function __construct() { if(!defined('__DIR__')) { define('__DIR__', dirname(__FILE__)); } $this->_appDir = __DIR__; $this->_appURL = $this->_getAppUrl(); $configFile = $this->_appDir . '/config.php'; if (file_exists($configFile)) { $this->_config = require_once($configFile); } else { die('ERROR: Missing application config file at ' . $configFile); } $this->_fileTypes = require_once($this->_appDir . '/fileTypes.php'); } public function isZipEnabled() { foreach ($this->_config['zip_disable'] as $disabledPath) { if (fnmatch($disabledPath, $this->_directory)) { return false; } } return $this->_config['zip_dirs']; } public function zipDirectory($directory) { if ($this->_config['zip_dirs']) { $directory = $this->setDirectoryPath($directory); if ($directory != '.' && $this->_isHidden($directory)) { echo "Access denied."; } $filename_no_ext = basename($directory); if ($directory == '.') { $filename_no_ext = 'Home'; } header('Content-Type: archive/zip'); header("Content-Disposition: attachment; filename=\"$filename_no_ext.zip\""); chdir($directory); $exclude_list = implode(' ', array_merge($this->_config['hidden_files'], array('index.php'))); $exclude_list = str_replace("*", "\*", $exclude_list); if ($this->_config['zip_stream']) { $stream = popen('/usr/bin/zip -' . $this->_config['zip_compression_level'] . ' -r -q - * -x ' . $exclude_list, 'r'); if ($stream) { fpassthru($stream); fclose($stream); } } else { $tmp_zip = tempnam('tmp', 'tempzip') . '.zip'; exec('zip -' . $this->_config['zip_compression_level'] . ' -r ' . $tmp_zip . ' * -x ' . $exclude_list); $filesize = filesize($tmp_zip); header("Content-Length: $filesize"); $fp = fopen($tmp_zip, 'r'); echo fpassthru($fp); unlink($tmp_zip); } } } public function listDirectory($directory,$omit_path = null) { if ($omit_path != null) { $this->_omitPath = $omit_path; } $directory = $this->setDirectoryPath($directory); if ($directory === null) { $directory = $this->_directory; } $directoryArray = $this->_readDirectory($directory); return $directoryArray; } public function listBreadcrumbs($directory = null) { if ($directory === null) { $directory = $this->_directory; } $dirArray = explode('/', $directory); $breadcrumbsArray[] = array( 'link' => "", 'text' => 'Home' ); foreach ($dirArray as $key => $dir) { if ($dir != '.') { $dirPath = null; for ($i = 0; $i <= $key; $i++) { $dirPath = $dirPath . $dirArray[$i] . '/'; } if(substr($dirPath, -1) == '/') { $dirPath = substr($dirPath, 0, -1); } $path = rawurlencode($dirPath); $breadcrumbsArray[] = array( 'path' => $path, 'text' => $dir ); } } return $breadcrumbsArray; } public function containsIndex($dirPath) { foreach ($this->_config['index_files'] as $indexFile) { if (file_exists($dirPath . '/' . $indexFile)) { return true; } } return false; } public function getListedPath() { if ($this->_directory == '.') { $path = $this->_appURL; } else { $path = $this->_appURL . $this->_directory; } return $path; } public function externalLinksNewWindow() { return $this->_config['external_links_new_window']; } public function getSystemMessages() { if (isset($this->_systemMessage) && is_array($this->_systemMessage)) { return $this->_systemMessage; } else { return false; } } function getFileSize($filePath) { $bytes = filesize($filePath); $sizes = array('B', 'KB', 'MB', 'GB', 'TB', 'PB'); $factor = floor((strlen($bytes) - 1) / 3); $fileSize = sprintf('%.2f', $bytes / pow(1024, $factor)) . $sizes[$factor]; return $fileSize; } public function getFileHash($filePath) { $hashArray = array(); if (!file_exists($filePath)) { return json_encode($hashArray); } if ($this->_isHidden($filePath)) { return json_encode($hashArray); } if (strpos($filePath, '<') !== false || strpos($filePath, '>') !== false || strpos($filePath, '..') !== false || strpos($filePath, '/') === 0) { return json_encode($hashArray); } if (filesize($filePath) > $this->_config['hash_size_limit']) { $hashArray['md5'] = '[ File size exceeds threshold ]'; $hashArray['sha1'] = '[ File size exceeds threshold ]'; } else { $hashArray['md5'] = hash_file('md5', $filePath); $hashArray['sha1'] = hash_file('sha1', $filePath); } return $hashArray; } public function setDirectoryPath($path = null) { $this->_directory = $this->_setDirectoryPath($path); return $this->_directory; } public function getDirectoryPath() { return $this->_directory; } public function setSystemMessage($type, $text) { if (isset($this->_systemMessage) && !is_array($this->_systemMessage)) { $this->_systemMessage = array(); } $this->_systemMessage[] = array( 'type' => $type, 'text' => $text ); return true; } protected function _setDirectoryPath($dir) { if (empty($dir) || $dir == '.') { return '.'; } while (strpos($dir, '//')) { $dir = str_replace('//', '/', $dir); } if(substr($dir, -1, 1) == '/') { $dir = substr($dir, 0, -1); } if (!file_exists($dir) || !is_dir($dir)) { $this->setSystemMessage('danger', '<b>ERROR:</b> File path does not exist'); return '.'; } if ($this->_isHidden($dir)) { $this->setSystemMessage('danger', '<b>ERROR:</b> Access denied'); return '.'; } if (strpos($dir, '<') !== false || strpos($dir, '>') !== false || strpos($dir, '..') !== false || strpos($dir, '/') === 0) { $this->setSystemMessage('danger', '<b>ERROR:</b> An invalid path string was detected'); return '.'; } else { $directoryPath = $dir; } return $directoryPath; } protected function _readDirectory($directory, $sort = 'natcase') { $directoryArray = array(); $files = scandir($directory); foreach ($files as $file) { if ($file != '.') { $relativePath = $directory . '/' . $file; if (substr($relativePath, 0, 2) == './') { $relativePath = substr($relativePath, 2); } if ($this->_directory == '.' && $file == '..'){ continue; } else { $realPath = realpath($relativePath); if (is_dir($realPath)) { $iconClass = 'fa-folder'; $sort = 1; } else { $fileExt = strtolower(pathinfo($realPath, PATHINFO_EXTENSION)); if (isset($this->_fileTypes[$fileExt])) { $iconClass = $this->_fileTypes[$fileExt]; } else { $iconClass = $this->_fileTypes['blank']; } $sort = 2; } $handler = ""; switch($iconClass) { case "fa-file-code-o": $handler = "editor"; break; case "fa-music": case "fa-youtube-play": $handler = "player"; break; case "fa-folder": $handler = "folder"; break; default: $handler = "file"; break; } } if (!$this->_isHidden($relativePath)) { if ($this->_directory != '.' || $file != 'index.php') { $urlPath = implode('/', array_map('rawurlencode', explode('/', $relativePath))); $directoryArray[pathinfo($relativePath, PATHINFO_BASENAME)] = array( 'file_path' => $relativePath, 'url_path' => $urlPath, 'permission' => @substr(sprintf('%o', fileperms($relativePath)), -4), 'file_size' => is_dir($realPath) ? '-' : $this->getFileSize($realPath), 'mod_time' => date('Y-m-d H:i:s', filemtime($realPath)), 'icon_class' => $iconClass, 'sort' => $sort, 'handler' => $handler ); } } } } $reverseSort = in_array($this->_directory, $this->_config['reverse_sort']); $sortedArray = $this->_arraySort($directoryArray, $this->_config['list_sort_order'], $reverseSort); return $sortedArray; } protected function _arraySort($array, $sortMethod, $reverse = false) { $sortedArray = array(); $finalArray = array(); $keys = array_keys($array); switch ($sortMethod) { case 'asort': asort($keys); break; case 'arsort': arsort($keys); break; case 'ksort': ksort($keys); break; case 'krsort': krsort($keys); break; case 'natcasesort': natcasesort($keys); break; case 'natsort': natsort($keys); break; case 'shuffle': shuffle($keys); break; } if ($this->_config['list_folders_first']) { foreach ($keys as $key) { if ($array[$key]['sort'] == 0) { $sortedArray['0'][$key] = $array[$key]; } } foreach ($keys as $key) { if ($array[$key]['sort'] == 1) { $sortedArray[1][$key] = $array[$key]; } } foreach ($keys as $key) { if ($array[$key]['sort'] == 2) { $sortedArray[2][$key] = $array[$key]; } } if ($reverse) { $sortedArray[1] = array_reverse($sortedArray[1]); $sortedArray[2] = array_reverse($sortedArray[2]); } } else { foreach ($keys as $key) { if ($array[$key]['sort'] == 0) { $sortedArray[0][$key] = $array[$key]; } } foreach ($keys as $key) { if ($array[$key]['sort'] > 0) { $sortedArray[1][$key] = $array[$key]; } } if ($reverse) { $sortedArray[1] = array_reverse($sortedArray[1]); } } foreach ($sortedArray as $array) { if (empty($array)) continue; foreach ($array as $key => $value) { $finalArray[$key] = $value; } } return $finalArray; } protected function _isHidden($filePath) { if ($this->_config['hide_dot_files']) { $this->_config['hidden_files'] = array_merge( $this->_config['hidden_files'], array('.*', '*/.*') ); } foreach ($this->_config['hidden_files'] as $hiddenPath) { if (fnmatch($hiddenPath, $filePath) && !fnmatch($hiddenPath, $this->_omitPath)) { return true; } } return false; } protected function _getAppUrl() { if (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') { $protocol = 'https://'; } else { $protocol = 'http://'; } $host = $_SERVER['HTTP_HOST']; $pathParts = pathinfo($_SERVER['PHP_SELF']); $path = $pathParts['dirname']; if (substr($path, -1) == '\\') { $path = substr($path, 0, -1); } if (substr($path, -1) != '/') { $path = $path . '/'; } $appUrl = $protocol . $host . $path; return $appUrl; } protected function _getRelativePath($fromPath, $toPath) { if (!defined('DS')) define('DS', DIRECTORY_SEPARATOR); $fromPath = str_replace(DS . DS, DS, $fromPath); $toPath = str_replace(DS . DS, DS, $toPath); $fromPathArray = explode(DS, $fromPath); $toPathArray = explode(DS, $toPath); $x = count($fromPathArray) - 1; if(!trim($fromPathArray[$x])) { array_pop($fromPathArray); } $x = count($toPathArray) - 1; if(!trim($toPathArray[$x])) { array_pop($toPathArray); } $arrayMax = max(count($fromPathArray), count($toPathArray)); $diffArray = array(); $samePath = true; $key = 1; while ($key <= $arrayMax) { $toPath = isset($toPathArray[$key]) ? $toPathArray[$key] : null; $fromPath = isset($fromPathArray[$key]) ? $fromPathArray[$key] : null; if ($toPath !== $fromPath || $samePath !== true) { if (isset($fromPathArray[$key])) { array_unshift($diffArray, '..'); } if (isset($toPathArray[$key])) { $diffArray[] = $toPathArray[$key]; } $samePath = false; } $key++; } $relativePath = implode('/', $diffArray); return $relativePath; } } 